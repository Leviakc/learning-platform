---
import { getEntry } from "astro:content";
import LessonLayout from "@/layouts/LessonLayout.astro";
import { Icon } from "astro-icon/components";
import Button from "@/components/ui/button/Button.astro";
import type { Lesson } from "@/types/lesson";
import type { Exercise } from "@/types/exercise";
import { orderedPythonLessons } from "@/utils/getOrderPythonLessons";
import ExerciseLayout from "@/layouts/ExerciseLayout.astro";
import { MonacoEditor } from "@/components/solid/MonacoEditor";
import { TestRunner } from "@/components/solid/TestRunner";

export async function getStaticPaths() {
  const topics = [
    ...new Set(orderedPythonLessons.map((lesson) => lesson.id.split("/")[0])),
  ];

  return topics.map((topic, index) => {
    const nextTopic = index < topics.length - 1 ? topics[index + 1] : null;
    return {
      params: { topic: topic },
      props: {
        topic,
        nextTopic,
      },
    };
  });
}

const { topic, nextTopic } = Astro.props;

const exercise = await getEntry("python", `${topic}/exercise`);
const lesson = await getEntry("python", `${topic}/lesson`);

const data = lesson?.data as Lesson;
const exerciseData = exercise?.data as Exercise;

const initialEditorCode = exercise?.body
  ? exercise.body
      .split("\n")
      .filter((line) => line.trim() !== "```python" && line.trim() !== "```")
      .join("\n")
  : "";
---

<LessonLayout title={data.title} description={data.description}>
  <div data-code={initialEditorCode}></div>

  <ExerciseLayout
    title={exerciseData.title || "Test"}
    description="Create variables of different types and print them."
  >
    <button
      class="border-input bg-background hover:bg-accent/70 hover:text-accent-foreground inline-flex h-9 cursor-pointer items-center justify-center gap-2 rounded-md border px-3 text-sm font-medium whitespace-nowrap"
      slot="reset-button"
      id="reset-button"
    >
      <Icon name="refresh-ccw" />
      Reset
    </button>

    <button
      class="bg-primary text-primary-foreground hover:bg-primary/80 inline-flex h-9 cursor-pointer items-center justify-center gap-2 rounded-md px-3 text-sm font-medium whitespace-nowrap"
      id="run-tests-button"
      slot="run-button"
    >
      <Icon name="play" class="mr-4" />
      Run Tests
    </button>

    <MonacoEditor
      client:only="solid-js"
      initialCode={initialEditorCode}
      slot="code-editor"
      language="python"
    />

    <!-- Test Results -->
    <TestRunner
      client:only="solid-js"
      tests={exerciseData.tests || []}
      runButtonId="run-tests-button"
      slot="test-results"
    />

    <div slot="status" class="text-center" id="exercise-status">
      <p class="text-muted-foreground text-sm">
        Click 'Run Tests' to check your code.
      </p>
    </div>
  </ExerciseLayout>

  <Fragment slot="footer">
    <div class="mt-8 flex justify-between" id="lesson-navigation">
      <Button variant="outline" href={`/python/lessons/${topic}`}>
        <Icon name="arrow-left" />
        Back to Lesson
      </Button>

      {
        nextTopic ? (
          <Button href={`/python/lessons/${nextTopic}`}>
            Next Lesson
            <Icon name="arrow-right" />
          </Button>
        ) : null
      }
    </div>
  </Fragment>
</LessonLayout>
